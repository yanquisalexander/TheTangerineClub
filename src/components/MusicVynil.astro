---
import type { Music } from "@/types/Music";
interface Props {
    music: Music;
}

const { music } = Astro.props;
---

<div class="box-container" style="--size: 300px;">
    <div class="cover-container">
        <header
            class="absolute top-0 z-[55] w-full text-center bg-gradient-to-b from-black to-transparent text-white p-4"
        >
            <h1 class="text-xl font-medium">{music.title}</h1>
        </header>
        <img src={`/images/music-covers/${music.id}.webp`} alt={music.title} />
        <div
            id="waveform"
            class="absolute bottom-0 w-full h-16 z-30 cursor-pointer"
        >
        </div>
    </div>
    <div class="vynil"></div>
</div>

<style>
    .box-container {
        position: relative;
        margin-top: 4rem;
    }

    .cover-container {
        display: grid;
        align-items: end;
        max-width: 512px;
        max-height: calc(512px + var(--offset));
        width: var(--size);
        height: calc(var(--size) + var(--offset));
        position: relative;
        overflow: hidden;
        border: 3px solid #000;
        background-color: #000;
        border-radius: 8px;
        transform: translate(-25%);
        transition: transform 1s;
        box-shadow:
            0 0 10px 2px #000c,
            0 0 35px #0008;

        @media (width <= 900px) {
            --size: 100%;
            width: 100%;
            translate: 25% 0;
        }
    }

    .vynil {
        width: var(--size, 200px);
        height: var(--size, 200px);
        position: absolute;
        top: 0;
        background: url("/images/vynil.webp") no-repeat;
        background-size: cover;
        transform: rotate(0deg);
        z-index: -1;
        animation: spin 3s linear infinite 1s;
        transition: translate 1s;
        translate: 30% 0;

        &.paused {
            animation-play-state: paused;
            translate: 0 0;
        }

        @media (width <= 900px) {
            display: none;
        }

        @media (width >= 900px) {
            &.paused {
                .cover-container:has(+ &) {
                    transform: translate(0);
                }
            }
        }
    }

    @keyframes spin {
        100% {
            transform: rotate(1turn);
        }
    }
</style>

<script>
    import { $ } from "@/lib/dom-selector";
    import type { Music } from "@/types/Music";
    import WaveSurfer from "wavesurfer.js";

    document.addEventListener("astro:page-load", () => {
        let music: Music | null = null;

        const $musicData = $("#music-data");
        const $vynil = $(".vynil");
        const $cover = $(".cover-container");

        if ($musicData) {
            music = JSON.parse($musicData.innerHTML);
        }

        if (music && $vynil) {
            const wavesurfer = WaveSurfer.create({
                container: "#waveform",
                waveColor: "#000",
                progressColor: "#fff",
                cursorColor: "transparent",
                barWidth: 3,
                barRadius: 8,
                barHeight: 1,
                height: 56,
                normalize: true,
                backend: "MediaElement",
                mediaControls: true,
                fillParent: true,
                hideScrollbar: true,
                url: `/music/${music.id}.mp3`,
            });

            wavesurfer.on("ready", () => {
                wavesurfer.play().catch(() => {
                    const clickListener = () => {
                        wavesurfer.play();
                        $vynil.classList.remove("paused");
                        document.removeEventListener("click", clickListener);
                    };
                    document.addEventListener("click", clickListener);
                });
            });

            $cover?.addEventListener("click", () => {
                if (wavesurfer.isPlaying()) {
                    wavesurfer.pause();
                    $vynil.classList.add("paused");
                } else {
                    wavesurfer.play();
                    $vynil.classList.remove("paused");
                }
            });
        }
    });
</script>
