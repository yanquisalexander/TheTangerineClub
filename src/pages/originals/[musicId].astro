---
import { MUSICS } from "@/consts/Music";
import Layout from "@/layouts/Layout.astro";
import MusicVynil from "@components/MusicVynil.astro";

export const getStaticPaths = () => {
    const paths = MUSICS.map((music) => ({
        params: {
            musicId: music.id,
        },
    }));

    return paths;
};

const { musicId } = Astro.params;
const music = MUSICS.find((music) => music.id === musicId);

export const prerender = true;

if (!music) {
    return new Response("Music not found", { status: 404 });
}

const schema = {
    "@context": "https://schema.org",
    "@type": "MusicRecording",
    byArtist: {
        "@type": "MusicGroup",
        name: "The Tangerine Club",
    },
    inAlbum: music.title,
    name: music.title,
    url: `https://thetangerineclub.com/originals/${music.id}`,
    datePublished: music.releaseDate,
};
---

<Layout
    title={`${music.title} - The Tangerine Club`}
    description={`Listen to ${music.title} by The Tangerine Club`}
    schema={schema}
>
    <section class="flex flex-col mt-16 items-center justify-center">
        <div class="max-w-5xl w-full mx-auto px-5">
            <script
                is:inline
                set:html={JSON.stringify(music)}
                id="music-data"
            />
            <h1 class="text-2xl font-semibold text-center">{music.title}</h1>
            <p class="text-sm text-gray-500 text-center">
                Release date:
                <date></date>
            </p>
            <div class="flex flex-col mdx:flex-row items-start justify-center">
                <article class="flex flex-col items-center w-full mdx:w-1/2">
                    <MusicVynil music={music} />
                    <div
                        class="bg-orange-500 text-white font-semibold px-4 py-2 mt-4"
                    >
                        PLACEHOLDER_STREAMING_PLATFORMS
                    </div>
                    <div
                        class="bg-orange-500 text-white font-semibold px-4 py-2 mt-4"
                    >
                        PLACEHOLDER_BUY_DIGITAL_TRACK
                    </div>
                </article>

                {
                    music.hasLyrics && (
                        <section class="mt-16 max-w-2xl mx-auto">
                            <h2 class="text-2xl font-semibold text-center">
                                Lyrics
                            </h2>
                            <div
                                id="lyrics-container"
                                class="mt-4 select-none"
                            />
                        </section>
                    )
                }
            </div>
        </div>
    </section>

    <template id="music-lyric-pharagraph">
        <p
            class="text-lg text-center opacity-50 cursor-pointer transition transform hover:opacity-100 hover:scale-105"
        >
            {/*@ts-ignore*/}
        </p>
    </template>
</Layout>

<script>
    import { $ } from "@/lib/dom-selector";
    import type { Music } from "@/types/Music";

    document.addEventListener("astro:page-load", () => {
        const $musicData = $("#music-data");
        const $releaseDate = $("date");

        const fetchLyrics = async (musicId: string): Promise<void> => {
            try {
                const response = await fetch(`/music/${musicId}.json`);

                if (!response.ok) {
                    throw new Error(
                        `Failed to fetch lyrics: ${response.statusText}`,
                    );
                }

                const lyrics = await response.json();

                if (!Array.isArray(lyrics)) {
                    throw new Error("Invalid lyrics format");
                }

                const $lyricsContainer = $("#lyrics-container");
                if (!$lyricsContainer) {
                    console.error("Lyrics container not found");
                    return;
                }

                const $lyricParagraphTemplate = $(
                    "#music-lyric-pharagraph",
                ) as HTMLTemplateElement;
                if (!$lyricParagraphTemplate) {
                    console.error("Template for lyric paragraphs not found");
                    return;
                }

                lyrics.forEach(
                    (lyric: {
                        line: number;
                        start_time: string;
                        end_time: string;
                        text: string;
                    }) => {
                        const $lyricParagraph =
                            $lyricParagraphTemplate.content.cloneNode(
                                true,
                            ) as HTMLElement;
                        const paragraphElement =
                            $lyricParagraph.querySelector("p");

                        if (paragraphElement) {
                            paragraphElement.innerText = lyric.text;
                            paragraphElement.dataset.startTime =
                                lyric.start_time;
                            paragraphElement.dataset.endTime = lyric.end_time;
                            $lyricsContainer.appendChild(paragraphElement);
                        } else {
                            console.error(
                                "Paragraph element not found in template",
                            );
                        }
                    },
                );
            } catch (error) {
                console.error("Error fetching lyrics:", error);
            }
        };

        if ($musicData) {
            const music = JSON.parse($musicData.innerHTML) as Music;
            const releaseDate = new Date(music.releaseDate);
            if ($releaseDate)
                $releaseDate.innerText = releaseDate.toLocaleDateString();
            if (music.hasLyrics) {
                fetchLyrics(music.id);
            }
        }
    });
</script>
